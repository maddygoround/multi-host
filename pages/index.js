import React, { useState, useEffect } from "react";
import Header from "../components/header/Header";
// import { Button, Col, Form, Input, message, Row } from "antd";
import Head from "next/head";
import axios from "axios";

import styles from "./index.module.css";

export default function Home() {
  const [domainUrl, setDomainUrl] = useState("");
  const [address, setAddress] = useState(null);
  const [isCheckingHost, setIsCheckingHost] = useState(false);
  const [error, setError] = useState("");

  const checkDomainhandler = (domain_url, cancelledtoken) => {
    const body = {
      domain_url: domain_url,
    };
    setIsCheckingHost(true);

    const url = `/api/checkhost`;
    axios
      .post(url, body, {
        cancelToken: cancelledtoken.token,
      })
      .then((response) => {
        if (response.data) {
          setAddress(response.data.name);
        } else {
          setError("Something went wrong!");
        }

        setIsCheckingHost(false);
      })
      .catch((error) => {
        if (error) {
          setError("Domain doesnt exist");
        }
        setIsCheckingHost(false);
      });
  };

  const updateConfig = (domainurl) => {
    const url = `/api/getConfig`;
    axios
      .get(domainurl)
      .then((response) => {
      })
      .catch((error) => {
        console.log(error.response);
      });
  };
  useEffect(() => {
    if (domainUrl) {
      const CancelToken = axios.CancelToken.source();
      setError(null);
      setAddress(null);
      checkDomainhandler(domainUrl, CancelToken);
      return () => {
        setError(null);
        CancelToken.cancel(`Previous Request Cancelled @${domainUrl}`);
      };
    }
  }, [domainUrl]);
  return (
    <div >
      <Head>
        <title>Multi-Host</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <div className={styles.main}>
        <section className={styles["description-section"]}>
          <div>
            <h1>
              <span className="hightlight-text">
                Deploy Site On Multiple Domains
              </span>
              <br />
              Close to Your Users
            </h1>
            <p className="text-lead my-2">
              Access your full stack apps on multiple domains. No ops required.
            </p>
          </div>
        </section>

        <section className={`${styles["demo-section"]}`}>
          <div
            className={`${styles.playarea} ${styles["bg-gray-700/30"]} border border-violet-200/10 w-full rounded-2xl xl:text-lg`}
          >
            <div className={styles["tabs-header"]}>
              <span>Live Demo</span>
            </div>

            <div className={styles["tabs-content"]}>
              <form>
                <label>
                  <span>url</span>
                  <input
                    name="domain_url"
                    value={domainUrl}
                    onChange={(e) => setDomainUrl(e.target.value)}
                    placeholder="Enter site-url, that you wanna host on your domain"
                    className={"ant-input"}
                  />
                  {isCheckingHost && (
                    <span className="info">Checking host</span>
                  )}
                  {!isCheckingHost && error && !address && (
                    <span className="error">{error}</span>
                  )}
                  {!isCheckingHost && address && (
                    <span className="success">domain found!</span>
                  )}
                </label>
              </form>
            </div>

            <div className={styles["tabs-footer"]}>
              <button
                disabled={!address}
                className="ant-btn"
                size="large"
                onClick={() => {
                  alert("pressedW");
                }}
              >
                Deploy &rarr;
              </button>
            </div>
          </div>
        </section>

        {/*<div className="grid">
          <Button
            disabled={!address}
            className="card d-flex align-items-center justify-content-center"
            size="large"
            style={{ color: "black" }}
            onClick={() => updateConfig(domainUrl)}
          >
            Deploy &rarr;
          </Button>
              </div>*/}
      </div>
    </div>
  );
}
